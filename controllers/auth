const User = require('../models/user');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { OAuth2Client } = require('google-auth-library');

const JWT_SECRET = process.env.JWT_SECRET;
const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const client = new OAuth2Client(GOOGLE_CLIENT_ID);

// ------------------------
// REGISTER
// ------------------------
exports.register = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    if (!name || !email || !password)
      return res.status(400).json({ message: 'Name, email, and password are required' });

    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: 'Email already in use' });

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });
    await user.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    console.error('Register Error:', err);
    res.status(500).json({ message: 'Server error' });
  }
};

// ------------------------
// LOGIN
// ------------------------
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password)
      return res.status(400).json({ message: 'Email and password are required' });

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'Invalid credentials' });
    if (!user.password) return res.status(400).json({ message: 'Please login with Google OAuth' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
    res.json({ token, user: { id: user._id, name: user.name, email: user.email } });
  } catch (err) {
    console.error('Login Error:', err);
    res.status(500).json({ message: 'Server error' });
  }
};

// ------------------------
// GOOGLE OAUTH
// ------------------------
exports.googleAuth = async (req, res) => {
  const { tokenId } = req.body;
  if (!tokenId) return res.status(400).json({ message: 'Google tokenId is required' });

  try {
    const ticket = await client.verifyIdToken({ idToken: tokenId, audience: GOOGLE_CLIENT_ID });
    const payload = ticket.getPayload();
    const { email, name, sub: googleId } = payload;

    let user = await User.findOne({ googleId });
    if (!user) {
      user = await User.findOne({ email });
      if (user && !user.googleId) {
        user.googleId = googleId;
        user.password = undefined;
        await user.save();
      } else if (!user) {
        user = new User({ name, email, googleId });
        await user.save();
      }
    }

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
    res.json({ token, user: { id: user._id, name: user.name, email: user.email } });
  } catch (err) {
    console.error('Google Auth Error:', err);
    res.status(401).json({ message: 'Invalid Google token' });
  }
};

// ------------------------
// GET CURRENT USER PROFILE
// ------------------------
exports.getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.userId).select('-password -googleId');
    if (!user) return res.status(404).json({ message: 'User not found' });
    res.json(user);
  } catch (err) {
    console.error('Get User Profile Error:', err);
    res.status(500).json({ message: 'Server error' });
  }
};

// ------------------------
// UPDATE USER PROFILE
// ------------------------
exports.updateUserProfile = async (req, res) => {
  try {
    const updates = {};
    const { name, email, password } = req.body;

    if (name) updates.name = name;
    if (email) {
      const emailExists = await User.findOne({ email, _id: { $ne: req.userId } });
      if (emailExists) return res.status(400).json({ message: 'Email already in use' });
      updates.email = email;
    }
    if (password) updates.password = await bcrypt.hash(password, 10);

    const user = await User.findByIdAndUpdate(req.userId, updates, { new: true }).select('-password -googleId');
    if (!user) return res.status(404).json({ message: 'User not found' });

    res.json(user);
  } catch (err) {
    console.error('Update User Profile Error:', err);
    res.status(500).json({ message: 'Server error' });
  }
};

// ------------------------
// DELETE USER ACCOUNT
// ------------------------
exports.deleteUserAccount = async (req, res) => {
  try {
    await User.findByIdAndDelete(req.userId);
    res.json({ message: 'User account deleted successfully' });
  } catch (err) {
    console.error('Delete User Account Error:', err);
    res.status(500).json({ message: 'Server error' });
  }
};
